{"version":3,"sources":["AudioSelector.js","index.js"],"names":["AudioSelector","playing","setPlaying","useState","selectedTrack","setSelectedTrack","volume","setVolume","previousVolume","setPreviousVolume","audioRef","useRef","Audio","tracks","id","title","duration","src","React","createElement","className","map","track","key","onClick","current","pause","play","handleTrackSelect","toggleMute","type","min","max","value","onChange","e","newVolume","parseInt","target","navigator","window","addEventListener","serviceWorker","register","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iLA2FeA,MAvFOA,KACpB,MAAOC,EAASC,GAAcC,oBAAS,IAChCC,EAAeC,GAAoBF,mBAAS,OAC5CG,EAAQC,GAAaJ,mBAAS,KAC9BK,EAAgBC,GAAqBN,mBAAS,IAC/CO,EAAWC,iBAAO,IAAIC,OAEtBC,EAAS,CACb,CAAEC,GAAI,EAAGC,MAAO,UAAWC,SAAU,OAAQC,IAAK,mCAClD,CAAEH,GAAI,EAAGC,MAAO,SAAUC,SAAU,OAAQC,IAAK,mCACjD,CAAEH,GAAI,EAAGC,MAAO,UAAWC,SAAU,OAAQC,IAAK,oCAqCpD,OACEC,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,OAAKC,UAAU,cACZP,EAAOQ,IAAKC,GACXJ,IAAAC,cAAA,UACEI,IAAKD,EAAMR,GACXU,QAASA,IAxCQF,MACR,OAAblB,QAAa,IAAbA,OAAa,EAAbA,EAAeU,MAAOQ,EAAMR,IAC1Bb,EACFS,EAASe,QAAQC,QAEjBhB,EAASe,QAAQE,OAEnBzB,GAAYD,KAEZS,EAASe,QAAQR,IAAMK,EAAML,IAC7BP,EAASe,QAAQnB,OAASA,EAAS,IACnCI,EAASe,QAAQE,OACjBtB,EAAiBiB,GACjBpB,GAAW,KA2BU0B,CAAkBN,GACjCF,UAAW,kBAA6B,OAAbhB,QAAa,IAAbA,OAAa,EAAbA,EAAeU,MAAOQ,EAAMR,GAAK,WAAa,KAEzEI,IAAAC,cAAA,OAAKC,UAAU,cACC,OAAbhB,QAAa,IAAbA,OAAa,EAAbA,EAAeU,MAAOQ,EAAMR,IAAMb,EAAU,eAAO,gBAEtDiB,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,OAAKC,UAAU,eAAeE,EAAMP,OACpCG,IAAAC,cAAA,OAAKC,UAAU,kBAAkBE,EAAMN,cAM9CZ,GACCc,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,UAAQK,QAvCGK,KACbvB,EAAS,GACXG,EAAkBH,GAClBC,EAAU,GACVG,EAASe,QAAQnB,OAAS,IAE1BC,EAAUC,GACVE,EAASe,QAAQnB,OAASE,EAAiB,OAiCzB,IAAXF,EAAe,eAAO,gBAEzBY,IAAAC,cAAA,SACEW,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,MAAO3B,EACP4B,SApCkBC,IAC1B,MAAMC,EAAYC,SAASF,EAAEG,OAAOL,OACpC1B,EAAU6B,GACV1B,EAASe,QAAQnB,OAAS8B,EAAY,KAkC9BhB,UAAU,kBAEZF,IAAAC,cAAA,QAAMC,UAAU,eAAed,EAAO,QC7E5C,kBAAmBiC,WACrBC,OAAOC,iBAAiB,OAAQ,KAC9BF,UAAUG,cAAcC,SAAS,wBAIxBC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH9B,IAAAC,cAACD,IAAM+B,WAAU,KACf/B,IAAAC,cAACnB,EAAa,S","file":"static/js/main.cc67e16d.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './styles.css';\nconst BASE_PATH = '/beaulne-player';\n\nconst AudioSelector = () => {\n  const [playing, setPlaying] = useState(false);\n  const [selectedTrack, setSelectedTrack] = useState(null);\n  const [volume, setVolume] = useState(80);\n  const [previousVolume, setPreviousVolume] = useState(80);\n  const audioRef = useRef(new Audio());\n\n  const tracks = [\n    { id: 1, title: \"Welcome\", duration: \"2:30\", src: `${BASE_PATH}/audio/Noise.wav` },\n    { id: 2, title: \"Artist\", duration: \"3:45\", src: `${BASE_PATH}/audio/Noise.wav` },\n    { id: 3, title: \"Artwork\", duration: \"4:15\", src: `${BASE_PATH}/audio/Noise.wav` }\n  ];\n\n  const handleTrackSelect = (track) => {\n    if (selectedTrack?.id === track.id) {\n      if (playing) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setPlaying(!playing);\n    } else {\n      audioRef.current.src = track.src;\n      audioRef.current.volume = volume / 100;\n      audioRef.current.play();\n      setSelectedTrack(track);\n      setPlaying(true);\n    }\n  };\n\n  const toggleMute = () => {\n    if (volume > 0) {\n      setPreviousVolume(volume);\n      setVolume(0);\n      audioRef.current.volume = 0;\n    } else {\n      setVolume(previousVolume);\n      audioRef.current.volume = previousVolume / 100;\n    }\n  };\n\n  const handleVolumeChange = (e) => {\n    const newVolume = parseInt(e.target.value);\n    setVolume(newVolume);\n    audioRef.current.volume = newVolume / 100;\n  };\n\n  return (\n    <div className=\"player-container\">\n      <div className=\"track-list\">\n        {tracks.map((track) => (\n          <button\n            key={track.id}\n            onClick={() => handleTrackSelect(track)}\n            className={`track-button ${selectedTrack?.id === track.id ? 'selected' : ''}`}\n          >\n            <div className=\"play-icon\">\n              {selectedTrack?.id === track.id && playing ? \"‚è∏Ô∏è\" : \"‚ñ∂Ô∏è\"}\n            </div>\n            <div className=\"track-info\">\n              <div className=\"track-title\">{track.title}</div>\n              <div className=\"track-duration\">{track.duration}</div>\n            </div>\n          </button>\n        ))}\n      </div>\n      \n      {selectedTrack && (\n        <div className=\"volume-control\">\n          <button onClick={toggleMute}>\n            {volume === 0 ? \"üîá\" : \"üîä\"}\n          </button>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={volume}\n            onChange={handleVolumeChange}\n            className=\"volume-slider\"\n          />\n          <span className=\"volume-text\">{volume}%</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioSelector;","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport AudioSelector from './AudioSelector';\nimport './styles.css';\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/service-worker.js');\n  });\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <AudioSelector />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}